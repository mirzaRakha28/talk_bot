name: Deploy Go Application in Docker to VPS

on:
  push:
    branches:
      - main  # Trigger deployment when pushing to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      run: |
        docker build -t mirzarakha2804/talk_bot:latest .
        docker push mirzarakha2804/talk_bot:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Set environment variables
      env:
        VPS_HOST: 103.175.219.140
        VPS_USER: arvalinno
      run: |
        echo "VPS_HOST: $VPS_HOST"
        echo "VPS_USER: $VPS_USER"
    
    - name: Deploy to VPS via SSH
      env: 
        SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}  # This should be your private key content
        VPS_HOST: ${{ secrets.VPS_HOST }}              # Your VPS IP
        VPS_USER: ${{ secrets.VPS_USER }}              # Your VPS username
      run: |
        echo "============================================="
        echo "${{ secrets.VPS_SSH_KEY }}"
        echo "============================================="
        # Install SSH client
        sudo apt-get update
        sudo apt-get install -y openssh-client
        
        # Add SSH key
        mkdir -p ~/.ssh
        echo "${SSH_PRIVATE_KEY}" > ~/.ssh/mirza.pem
        chmod 600 ~/.ssh/mirza.pem
        
        # Add VPS to known hosts to prevent prompt
        ssh-keyscan -H $VPS_HOST >> ~/.ssh/known_hosts

        # Run the deployment commands
        ssh -i ~/.ssh/mirza.pem $VPS_USER@$VPS_HOST << 'EOF'
          # Pull the latest image from Docker Hub
          docker pull mirzarakha2804/talk_bot:latest

          # Stop and remove the existing container if it's running
          docker stop talk_bot || true
          docker rm talk_bot || true

          # Run the new container
          docker run -d --name talk_bot mirzarakha2804/talk_bot:latest
        EOF

